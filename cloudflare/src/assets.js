// Auto-generated assets file
// This file is generated from root directory assets to maintain code unification

export const indexHTML = "<!DOCTYPE html>\n<html lang=\"zh-TW\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PokerPhase - 敏捷估算工具</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Header -->\n        <header class=\"header\">\n            <h1>PokerPhase</h1>\n        </header>\n        \n        <!-- Welcome Screen -->\n        <div id=\"welcomeScreen\" class=\"welcome-screen\">\n            <div class=\"welcome-content\">\n                <h2>歡迎使用 PokerPhase</h2>\n                <p>敏捷團隊的故事點估算工具</p>\n                <div class=\"welcome-actions\">\n                    <button id=\"createRoomBtn\" class=\"btn btn-primary\">建立新房間</button>\n                    <div class=\"join-room\">\n                        <input type=\"text\" id=\"roomIdInput\" placeholder=\"輸入房間 ID\">\n                        <button id=\"joinRoomBtn\" class=\"btn btn-secondary\">加入房間</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Name Input Modal -->\n        <div id=\"nameModal\" class=\"modal\" style=\"display: none;\">\n            <div class=\"modal-content\">\n                <h3>請輸入您的姓名</h3>\n                <input type=\"text\" id=\"userNameInput\" placeholder=\"姓名\" maxlength=\"20\">\n                <div class=\"modal-actions\">\n                    <button id=\"confirmNameBtn\" class=\"btn btn-primary\">確認</button>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Main Game Screen -->\n        <div id=\"gameScreen\" class=\"game-screen\" style=\"display: none;\">\n            <!-- Participants List -->\n            <div class=\"participants-panel\">\n                <div class=\"participants-header\">\n                    <h3>參與者</h3>\n                    <div class=\"participants-count\">\n                        <span id=\"participantsCount\">0 participants</span>\n                    </div>\n                </div>\n                <div id=\"participantsList\" class=\"participants-list\">\n                    <!-- Participants will be added dynamically -->\n                </div>\n                \n                <!-- Projectile Selector -->\n                <div class=\"projectile-selector\">\n                    <div class=\"projectile-options\">\n                        <div class=\"projectile-option active\" data-type=\"boomerang\" title=\"迴力鏢\">\n                            <span class=\"projectile-icon\">🪃</span>\n                        </div>\n                        <div class=\"projectile-option\" data-type=\"rocket\" title=\"火箭\">\n                            <span class=\"projectile-icon\">🚀</span>\n                        </div>\n                        <div class=\"projectile-option\" data-type=\"stone\" title=\"隕石\">\n                            <span class=\"projectile-icon\">🪨</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- Main Content -->\n            <div class=\"main-content\">\n                <!-- Voting Cards -->\n                <div class=\"voting-section\">\n                    <h3>選擇您的估算</h3>\n                    <div class=\"cards-container\" id=\"cardsContainer\">\n                        <!-- Fibonacci sequence cards -->\n                        <div class=\"card\" data-value=\"0\">0</div>\n                        <div class=\"card\" data-value=\"1/2\">½</div>\n                        <div class=\"card\" data-value=\"1\">1</div>\n                        <div class=\"card\" data-value=\"2\">2</div>\n                        <div class=\"card\" data-value=\"3\">3</div>\n                        <div class=\"card\" data-value=\"5\">5</div>\n                        <div class=\"card\" data-value=\"8\">8</div>\n                        <div class=\"card\" data-value=\"13\">13</div>\n                        <div class=\"card\" data-value=\"21\">21</div>\n                        <div class=\"card\" data-value=\"?\">?</div>\n                        <div class=\"card\" data-value=\"🚻\">🚻</div>\n                    </div>\n                </div>\n                \n                <!-- Voting Status -->\n                <div class=\"voting-status\">\n                    <div id=\"votingProgress\" class=\"voting-progress\">\n                        <span>等待所有人投票...</span>\n                    </div>\n                </div>\n                \n                <!-- Boomerang Throw Notifications -->\n                <div id=\"paperBallNotification\" class=\"paper-ball-notification\" style=\"display: none;\">\n                    <div class=\"paper-ball-content\">\n                        <div class=\"paper-ball-icon\">🪃💥</div>\n                        <div class=\"paper-ball-message\"></div>\n                    </div>\n                </div>\n                \n                <!-- Results -->\n                <div id=\"resultsSection\" class=\"results-section\" style=\"display: none;\">\n                    <h3>投票結果</h3>\n                    <div id=\"resultsContainer\" class=\"results-container\">\n                        <!-- Results will be displayed here -->\n                    </div>\n                    <!-- Results actions moved to room-controls for better organization -->\n                </div>\n            </div>\n            \n            <!-- Room Info -->\n            <div class=\"room-info\">\n                <div class=\"room-id\">\n                    房間 ID: <span id=\"currentRoomId\"></span>\n                    <button id=\"copyRoomLinkBtn\" class=\"btn btn-small\">複製連結</button>\n                </div>\n                <div class=\"room-controls\">\n                    <button id=\"claimHostBtn\" class=\"btn btn-warning\" style=\"display: none;\">奪取主持人</button>\n                    <button id=\"revealBtn\" class=\"btn btn-primary\" style=\"display: none;\">揭示結果</button>\n                    <button id=\"revoteBtn\" class=\"btn btn-secondary\" style=\"display: none;\">重新投票</button>\n                    <button id=\"nextIssueBtn\" class=\"btn btn-primary\" style=\"display: none;\">下一議題</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>";
export const styleCSS = "/* Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n/* Header */\n.header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: rgba(255, 255, 255, 0.95);\n    padding: 20px 30px;\n    border-radius: 15px;\n    margin-bottom: 30px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n}\n\n.header h1 {\n    color: #4a5568;\n    font-size: 2rem;\n    font-weight: 700;\n}\n\n/* Welcome Screen */\n.welcome-screen {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.welcome-content {\n    background: rgba(255, 255, 255, 0.95);\n    padding: 50px;\n    border-radius: 20px;\n    text-align: center;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n    max-width: 500px;\n    width: 100%;\n}\n\n.welcome-content h2 {\n    color: #2d3748;\n    font-size: 2.5rem;\n    margin-bottom: 15px;\n    font-weight: 700;\n}\n\n.welcome-content p {\n    color: #718096;\n    font-size: 1.1rem;\n    margin-bottom: 40px;\n}\n\n.welcome-actions {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\n.join-room {\n    display: flex;\n    gap: 10px;\n}\n\n.join-room input {\n    flex: 1;\n    padding: 12px 15px;\n    border: 2px solid #e2e8f0;\n    border-radius: 10px;\n    font-size: 1rem;\n    transition: border-color 0.3s ease;\n}\n\n.join-room input:focus {\n    outline: none;\n    border-color: #667eea;\n}\n\n.join-room input::placeholder {\n    color: #a0aec0;\n}\n\n/* Buttons */\n.btn {\n    padding: 12px 24px;\n    border: none;\n    border-radius: 10px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-decoration: none;\n    display: inline-block;\n    text-align: center;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n}\n\n.btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);\n}\n\n.btn-secondary {\n    background: #e2e8f0;\n    color: #4a5568;\n}\n\n.btn-secondary:hover {\n    background: #cbd5e0;\n    transform: translateY(-1px);\n}\n\n.btn-small {\n    padding: 6px 12px;\n    font-size: 0.85rem;\n}\n\n.btn-warning {\n    background: #ed8936;\n    color: white;\n}\n\n.btn-warning:hover {\n    background: #dd6b20;\n    transform: translateY(-1px);\n}\n\n/* Modal */\n.modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.7);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n}\n\n.modal-content {\n    background: white;\n    padding: 40px;\n    border-radius: 15px;\n    text-align: center;\n    max-width: 400px;\n    width: 90%;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n}\n\n.modal-content h3 {\n    color: #2d3748;\n    margin-bottom: 20px;\n    font-size: 1.5rem;\n}\n\n.modal-content input {\n    width: 100%;\n    padding: 12px 15px;\n    border: 2px solid #e2e8f0;\n    border-radius: 10px;\n    font-size: 1rem;\n    margin-bottom: 20px;\n}\n\n.modal-content input:focus {\n    outline: none;\n    border-color: #667eea;\n}\n\n.modal-actions {\n    display: flex;\n    justify-content: center;\n}\n\n/* Game Screen */\n.game-screen {\n    flex: 1;\n    display: grid;\n    grid-template-columns: 250px 1fr;\n    grid-template-rows: minmax(0, 1fr) auto;\n    gap: 20px;\n    height: calc(100vh - 120px); /* Adjust based on header height */\n    overflow: hidden;\n    max-height: calc(100vh - 120px); /* Prevent vertical overflow */\n}\n\n/* Participants Panel */\n.participants-panel {\n    background: rgba(255, 255, 255, 0.95);\n    padding: 25px;\n    border-radius: 15px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n.participants-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.participants-panel h3 {\n    color: #2d3748;\n    margin-bottom: 0;\n    font-size: 1.2rem;\n    font-weight: 600;\n}\n\n.participants-count {\n    background: #667eea;\n    color: white;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 0.75rem;\n    font-weight: 500;\n}\n\n.participants-list {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    flex: 1;\n    overflow-y: auto;\n    margin-bottom: 15px;\n    min-height: 0; /* Allow flexbox shrinking */\n    max-height: calc(100vh - 350px); /* Ensure it doesn't exceed available space */\n}\n\n.participant-item {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 12px 15px;\n    background: #f7fafc;\n    border-radius: 10px;\n    border-left: 4px solid #e2e8f0;\n    transition: all 0.3s ease;\n}\n\n.participant-item.throwable-item {\n    background: linear-gradient(135deg, #f7fafc 0%, rgba(102, 126, 234, 0.05) 100%);\n    border-left-color: rgba(102, 126, 234, 0.3);\n    animation: throwableItemPulse 5s ease-in-out infinite;\n}\n\n.participant-item.throwable-item:hover {\n    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.15) 100%);\n    border-left-color: #667eea;\n    transform: translateX(5px) scale(1.02);\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);\n}\n\n/* Remove boomerang hint - we don't want to show it on hover */\n\n.participant-item.voted {\n    border-left-color: #48bb78;\n    background: #f0fff4;\n}\n\n.participant-item.host {\n    border-left-color: #667eea;\n    background: #ebf4ff;\n}\n\n.participant-item.self {\n    border-left-color: #38b2ac;\n    background: linear-gradient(135deg, #e6fffa 0%, #b2f5ea 100%);\n    box-shadow: 0 2px 12px rgba(56, 178, 172, 0.3);\n    border: 2px solid rgba(56, 178, 172, 0.2);\n    border-left: 4px solid #38b2ac;\n}\n\n.participant-item.self .participant-name {\n    color: #234e52;\n    font-weight: 600;\n}\n\n\n/* Combined styles for self + host */\n.participant-item.self.host {\n    border-left-color: #805ad5;\n    background: linear-gradient(135deg, #faf5ff 0%, #e9d8fd 100%);\n    box-shadow: 0 2px 12px rgba(128, 90, 213, 0.3);\n    border: 2px solid rgba(128, 90, 213, 0.2);\n    border-left: 4px solid #805ad5;\n}\n\n.participant-item.self.host .participant-name {\n    color: #44337a;\n    font-weight: 700;\n}\n\n\n.participant-name {\n    font-weight: 500;\n    color: #2d3748;\n}\n\n.participant-vote-status {\n    font-size: 1.2rem;\n    color: #48bb78;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 24px;\n}\n\n/* Hit effect for participants */\n.participant-hit {\n    animation: participantHitEffect 2s ease-in-out;\n    border-left-color: #f56565 !important;\n    background: linear-gradient(135deg, #fed7d7 0%, #feb2b2 50%, #fc8181 100%) !important;\n    box-shadow: 0 0 20px rgba(245, 101, 101, 0.6), inset 0 0 10px rgba(245, 101, 101, 0.3) !important;\n}\n\n@keyframes participantHitEffect {\n    0%, 100% {\n        transform: translateX(0);\n        border-left-width: 4px;\n    }\n    10% {\n        transform: translateX(-3px);\n        border-left-width: 6px;\n    }\n    20% {\n        transform: translateX(3px);\n        border-left-width: 8px;\n    }\n    30% {\n        transform: translateX(-2px);\n        border-left-width: 6px;\n    }\n    40% {\n        transform: translateX(2px);\n        border-left-width: 4px;\n    }\n    50% {\n        transform: translateX(-1px);\n        border-left-width: 6px;\n    }\n    60% {\n        transform: translateX(1px);\n        border-left-width: 8px;\n    }\n    70% {\n        transform: translateX(0);\n        border-left-width: 6px;\n    }\n    80% {\n        border-left-width: 4px;\n    }\n}\n\n/* Main Content */\n.main-content {\n    background: rgba(255, 255, 255, 0.95);\n    padding: 20px;\n    border-radius: 15px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    overflow-y: auto;\n    max-height: 100%;\n}\n\n/* Current Issue */\n.current-issue h3 {\n    color: #2d3748;\n    margin-bottom: 15px;\n    font-size: 1.3rem;\n    font-weight: 600;\n}\n\n.issue-card {\n    background: #f7fafc;\n    padding: 20px;\n    border-radius: 12px;\n    border-left: 4px solid #667eea;\n}\n\n.issue-title {\n    font-size: 1.1rem;\n    color: #4a5568;\n    font-weight: 500;\n}\n\n/* Voting Section */\n.voting-section h3 {\n    color: #2d3748;\n    margin-bottom: 15px;\n    font-size: 1.3rem;\n    font-weight: 600;\n    text-align: center;\n}\n\n.cards-container {\n    display: grid;\n    grid-template-columns: repeat(6, 1fr);\n    justify-content: center;\n    gap: 15px;\n    margin-bottom: 15px;\n    max-width: 680px;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n.card {\n    width: 80px;\n    height: 110px;\n    background: linear-gradient(145deg, #ffffff, #f0f0f0);\n    border: 2px solid #e2e8f0;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #4a5568;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n    user-select: none;\n}\n\n.card:hover {\n    transform: translateY(-5px) scale(1.05);\n    border-color: #667eea;\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);\n}\n\n.card.selected {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    border-color: #667eea;\n    transform: translateY(-5px);\n    box-shadow: 0 12px 30px rgba(102, 126, 234, 0.4);\n}\n\n.card.disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    pointer-events: none;\n}\n\n/* Voting Status */\n.voting-status {\n    text-align: center;\n    margin-bottom: 15px;\n}\n\n/* Projectile Selector */\n.projectile-selector {\n    margin-top: auto;\n    padding-top: 15px;\n    border-top: 1px solid #e2e8f0;\n    flex-shrink: 0;\n    min-height: 60px; /* Fixed height for projectile selector */\n}\n\n\n.projectile-options {\n    display: flex;\n    justify-content: center;\n    gap: 8px;\n    background: rgba(255, 255, 255, 0.9);\n    padding: 8px;\n    border-radius: 8px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.projectile-option {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 6px;\n    border: 2px solid #e2e8f0;\n    border-radius: 6px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    background: #f7fafc;\n    width: 36px;\n    height: 36px;\n}\n\n.projectile-option:hover {\n    border-color: #667eea;\n    background: #ebf4ff;\n    transform: translateY(-1px);\n}\n\n.projectile-option.active {\n    border-color: #667eea;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n}\n\n.projectile-icon {\n    font-size: 1.2rem;\n}\n\n.voting-progress {\n    color: #718096;\n    font-size: 1.1rem;\n    margin-bottom: 20px;\n}\n\n/* Boomerang Throw Feature */\n.participant-item {\n    position: relative;\n}\n\n.participant-name.throwable {\n    cursor: pointer;\n    transition: all 0.2s ease;\n    position: relative;\n    background: linear-gradient(135deg, transparent 0%, rgba(102, 126, 234, 0.1) 100%);\n    border-radius: 6px;\n    padding: 2px 6px;\n    margin: -2px -6px;\n    animation: throwablePulse 5s ease-in-out infinite;\n}\n\n/* Optional: Staggered animation delays for visual effect */\n.participant-item:nth-child(odd) .participant-name.throwable,\n.participant-item.throwable-item:nth-child(odd) {\n    animation-delay: 0s;\n}\n\n.participant-item:nth-child(even) .participant-name.throwable,\n.participant-item.throwable-item:nth-child(even) {\n    animation-delay: 0.5s;\n}\n\n.participant-name.throwable:hover {\n    transform: scale(1.02);\n    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.2) 100%);\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n/* Remove boomerang hint from participant names too */\n\n@keyframes boomerangHint {\n    0%, 100% { transform: translateY(-50%) scale(1) rotate(0deg); }\n    25% { transform: translateY(-50%) scale(1.1) rotate(45deg); }\n    50% { transform: translateY(-50%) scale(1.2) rotate(90deg); }\n    75% { transform: translateY(-50%) scale(1.1) rotate(135deg); }\n}\n\n@keyframes throwablePulse {\n    0%, 85%, 100% { \n        background: linear-gradient(135deg, transparent 0%, rgba(102, 126, 234, 0.1) 100%);\n        box-shadow: none;\n    }\n    50% { \n        background: linear-gradient(135deg, rgba(102, 126, 234, 0.12) 0%, rgba(102, 126, 234, 0.18) 100%);\n        box-shadow: 0 0 8px rgba(102, 126, 234, 0.2);\n    }\n}\n\n@keyframes throwableItemPulse {\n    0%, 85%, 100% { \n        background: linear-gradient(135deg, #f7fafc 0%, rgba(102, 126, 234, 0.05) 100%);\n        border-left-color: rgba(102, 126, 234, 0.3);\n        box-shadow: none;\n    }\n    50% { \n        background: linear-gradient(135deg, #f7fafc 0%, rgba(102, 126, 234, 0.08) 100%);\n        border-left-color: rgba(102, 126, 234, 0.5);\n        box-shadow: 0 2px 10px rgba(102, 126, 234, 0.15);\n    }\n}\n\n/* Flying Projectiles Animation */\n.flying-boomerang,\n.flying-rocket,\n.flying-stone {\n    position: fixed;\n    font-size: 2.5rem;\n    pointer-events: none;\n    z-index: 1003;\n    transform-origin: center;\n    filter: drop-shadow(3px 3px 6px rgba(0, 0, 0, 0.4));\n    will-change: transform;\n}\n\n.flying-rocket {\n    filter: drop-shadow(0 0 8px rgba(255, 140, 0, 0.6)) brightness(1.2);\n}\n\n.flying-stone {\n    filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.6));\n}\n\n@keyframes boomerangSpin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.boomerang-impact {\n    position: fixed;\n    font-size: 3rem;\n    pointer-events: none;\n    z-index: 1004;\n    animation: boomerangImpact 1s ease-out forwards;\n}\n\n@keyframes boomerangImpact {\n    0% {\n        transform: scale(0) rotate(0deg);\n        opacity: 1;\n    }\n    30% {\n        transform: scale(1.8) rotate(180deg);\n        opacity: 1;\n    }\n    60% {\n        transform: scale(1.2) rotate(270deg);\n        opacity: 0.8;\n    }\n    100% {\n        transform: scale(2.5) rotate(360deg);\n        opacity: 0;\n    }\n}\n\n@keyframes screenShake {\n    0%, 100% {\n        transform: translateX(0);\n    }\n    10%, 30%, 50%, 70%, 90% {\n        transform: translateX(-2px);\n    }\n    20%, 40%, 60%, 80% {\n        transform: translateX(2px);\n    }\n}\n\n.paper-ball-notification {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: rgba(255, 255, 255, 0.98);\n    border: 3px solid #f6ad55;\n    border-radius: 20px;\n    padding: 30px;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n    z-index: 1002;\n    max-width: 400px;\n    text-align: center;\n    animation: paperBallBounce 0.6s ease-out;\n}\n\n.paper-ball-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 15px;\n}\n\n.paper-ball-icon {\n    font-size: 3rem;\n    animation: paperBallSpin 0.8s ease-out;\n}\n\n.paper-ball-message {\n    font-size: 1.2rem;\n    font-weight: 600;\n    color: #2d3748;\n    line-height: 1.4;\n}\n\n@keyframes paperBallBounce {\n    0% {\n        transform: translate(-50%, -50%) scale(0.3) rotate(-180deg);\n        opacity: 0;\n    }\n    50% {\n        transform: translate(-50%, -50%) scale(1.1) rotate(-90deg);\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(1) rotate(0deg);\n        opacity: 1;\n    }\n}\n\n@keyframes paperBallSpin {\n    0% {\n        transform: rotate(0deg) scale(0.5);\n    }\n    50% {\n        transform: rotate(180deg) scale(1.2);\n    }\n    100% {\n        transform: rotate(360deg) scale(1);\n    }\n}\n\n/* Results Section */\n.results-section {\n    animation: fadeIn 0.5s ease-in-out;\n}\n\n.results-section h3 {\n    color: #2d3748;\n    margin-bottom: 15px;\n    font-size: 1.3rem;\n    font-weight: 600;\n    text-align: center;\n}\n\n.results-container {\n    display: flex;\n    justify-content: center;\n    gap: 15px;\n    flex-wrap: wrap;\n    margin-bottom: 20px;\n    max-height: 300px;\n    overflow-y: auto;\n    padding: 10px;\n}\n\n.result-item {\n    background: #f7fafc;\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n    min-width: 100px;\n    border: 2px solid #e2e8f0;\n    flex: 0 0 auto;\n}\n\n.result-item.highest {\n    border-color: #f56565;\n    background: #fed7d7;\n}\n\n.result-item.lowest {\n    border-color: #48bb78;\n    background: #c6f6d5;\n}\n\n.result-item.no-vote {\n    border-color: #cbd5e0;\n    background: #f7fafc;\n    opacity: 0.7;\n}\n\n.result-value.no-vote-text {\n    color: #a0aec0;\n    font-style: italic;\n    font-size: 1.2rem;\n}\n\n.result-participant {\n    font-weight: 500;\n    color: #2d3748;\n    margin-bottom: 8px;\n}\n\n.result-value {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #4a5568;\n}\n\n.results-actions {\n    display: flex;\n    justify-content: center;\n    gap: 15px;\n}\n\n/* Room Info */\n.room-info {\n    grid-column: 1 / -1;\n    background: rgba(255, 255, 255, 0.95);\n    padding: 15px 25px;\n    border-radius: 10px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 15px;\n    flex-wrap: wrap;\n}\n\n.room-id {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-weight: 500;\n    color: #4a5568;\n}\n\n.room-controls {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    flex-wrap: wrap;\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(-100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n.participant-item {\n    animation: slideIn 0.3s ease-out;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .container {\n        padding: 10px;\n    }\n    \n    .header {\n        padding: 15px 20px;\n        flex-direction: column;\n        gap: 10px;\n        text-align: center;\n    }\n    \n    .header h1 {\n        font-size: 1.5rem;\n    }\n    \n    .welcome-content {\n        padding: 30px 20px;\n        margin: 10px;\n    }\n    \n    .welcome-content h2 {\n        font-size: 2rem;\n    }\n    \n    .join-room {\n        flex-direction: column;\n    }\n    \n    .game-screen {\n        grid-template-columns: 1fr;\n        grid-template-rows: auto 1fr auto;\n    }\n    \n    .participants-panel {\n        order: -1;\n        max-height: 200px; /* Limit height on mobile */\n        overflow: hidden;\n    }\n    \n    .participants-list {\n        max-height: calc(200px - 120px); /* Account for header and projectile selector */\n    }\n    \n    .cards-container {\n        grid-template-columns: repeat(4, 1fr);\n        gap: 10px;\n    }\n    \n    .card {\n        width: 60px;\n        height: 85px;\n        font-size: 1.4rem;\n    }\n    \n    .results-container {\n        gap: 8px;\n        max-height: 200px;\n        padding: 5px;\n    }\n    \n    .result-item {\n        min-width: 80px;\n        padding: 10px;\n        font-size: 0.9rem;\n    }\n    \n    .room-info {\n        flex-direction: column;\n        gap: 10px;\n        text-align: center;\n    }\n    \n    .room-controls {\n        justify-content: center;\n        gap: 8px;\n    }\n    \n    .room-controls .btn {\n        font-size: 0.8rem;\n        padding: 6px 10px;\n    }\n    \n    /* Boomerang throw mobile adjustments */\n    .participant-name.throwable::after {\n        right: -20px;\n        font-size: 0.8rem;\n    }\n    \n    .participant-name.throwable:hover::after {\n        right: -25px;\n    }\n    \n    .flying-boomerang {\n        font-size: 1.5rem;\n    }\n    \n    .boomerang-impact {\n        font-size: 2rem;\n    }\n    \n    .paper-ball-notification {\n        margin: 10px;\n        padding: 20px;\n        max-width: calc(100% - 20px);\n    }\n    \n    .paper-ball-icon {\n        font-size: 2.5rem;\n    }\n    \n    .paper-ball-message {\n        font-size: 1rem;\n    }\n    \n    .participant-name.throwable {\n        padding: 3px 8px;\n        margin: -3px -8px;\n    }\n    \n    .participant-item.throwable-item:hover {\n        transform: translateX(3px) scale(1.01);\n    }\n    \n}\n\n@media (max-width: 480px) {\n    .welcome-content h2 {\n        font-size: 1.8rem;\n    }\n    \n    .cards-container {\n        grid-template-columns: repeat(3, 1fr);\n    }\n    \n    .card {\n        width: 50px;\n        height: 70px;\n        font-size: 1.2rem;\n    }\n    \n    .main-content {\n        padding: 20px;\n        gap: 20px;\n    }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .card {\n        border-width: 3px;\n    }\n    \n    .card:hover,\n    .card.selected {\n        border-width: 4px;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    * {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n    \n    .card:hover {\n        transform: none;\n    }\n    \n    .btn:hover {\n        transform: none;\n    }\n    \n    .participant-name.throwable {\n        animation: none !important;\n    }\n    \n    .participant-name.throwable::after {\n        animation: none !important;\n    }\n    \n    .flying-boomerang {\n        display: none !important;\n    }\n    \n    .boomerang-impact {\n        display: none !important;\n    }\n}";  
export const scriptJS = "class PlanningPoker {\n    constructor() {\n        this.currentRoom = null;\n        this.currentUser = null;\n        this.participants = new Map();\n        this.votes = new Map();\n        this.isHost = false;\n        this.votingActive = false;\n        this.votesRevealed = false;\n        this.currentIssue = \"準備估算第一個故事\";\n        this.apiBase = window.location.origin + '/api';\n        this.currentProjectile = 'boomerang'; // Default projectile\n        this.playedAnimations = new Set(); // Track played animations to avoid duplicates\n        \n        // Track UI state to avoid unnecessary updates\n        this.lastUIState = {\n            participantsHash: '',\n            votingActive: false,\n            votesRevealed: false,\n            currentIssue: '',\n            participantsCount: 0\n        };\n        \n        this.initializeEventListeners();\n        this.updateParticipantsCount(); // Hide participants count initially\n        this.checkForRoomInURL();\n    }\n\n    initializeEventListeners() {\n        // Welcome screen buttons\n        document.getElementById('createRoomBtn').addEventListener('click', () => this.createRoom());\n        document.getElementById('joinRoomBtn').addEventListener('click', () => this.showJoinRoomModal());\n        \n        // Name modal\n        document.getElementById('confirmNameBtn').addEventListener('click', () => this.confirmName());\n        document.getElementById('userNameInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.confirmName();\n        });\n        \n        // Voting cards\n        document.querySelectorAll('.card').forEach(card => {\n            card.addEventListener('click', () => this.selectCard(card.dataset.value));\n        });\n        \n        // Game controls\n        document.getElementById('revealBtn').addEventListener('click', () => this.revealVotes());\n        document.getElementById('revoteBtn').addEventListener('click', () => this.startNewVoting());\n        document.getElementById('nextIssueBtn').addEventListener('click', () => this.nextIssue());\n        document.getElementById('copyRoomLinkBtn').addEventListener('click', () => this.copyRoomLink());\n        document.getElementById('claimHostBtn').addEventListener('click', () => this.claimHost());\n        \n        // Room ID input\n        document.getElementById('roomIdInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.showJoinRoomModal();\n        });\n        \n        // Boomerang notification click to close\n        document.getElementById('paperBallNotification').addEventListener('click', () => {\n            this.hidePaperBallNotification();\n        });\n        \n        // Projectile selection\n        document.querySelectorAll('.projectile-option').forEach(option => {\n            option.addEventListener('click', () => this.selectProjectile(option.dataset.type));\n        });\n        \n        // Handle page unload (user closes window/tab)\n        window.addEventListener('beforeunload', () => {\n            this.leaveRoom();\n        });\n        \n        // Handle visibility change (user switches tab)\n        document.addEventListener('visibilitychange', () => {\n            if (document.visibilityState === 'hidden') {\n                // Optional: Could also handle tab switching\n                // this.leaveRoom();\n            }\n        });\n    }\n\n    generateRoomId() {\n        return Math.random().toString(36).substring(2, 8).toUpperCase();\n    }\n\n    generateUserId() {\n        return Math.random().toString(36).substring(2, 10);\n    }\n\n    checkForRoomInURL() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const roomId = urlParams.get('room');\n        if (roomId) {\n            document.getElementById('roomIdInput').value = roomId;\n            this.showJoinRoomModal();\n        }\n    }\n\n    createRoom() {\n        this.currentRoom = this.generateRoomId();\n        this.isHost = true;\n        this.showNameModal('create');\n    }\n\n    showJoinRoomModal() {\n        const roomId = document.getElementById('roomIdInput').value.trim().toUpperCase();\n        if (!roomId) {\n            alert('請輸入房間 ID');\n            return;\n        }\n        this.currentRoom = roomId;\n        // Don't set isHost here, let server decide based on room state\n        this.showNameModal('join');\n    }\n\n    showNameModal(action) {\n        const modal = document.getElementById('nameModal');\n        modal.style.display = 'flex';\n        document.getElementById('userNameInput').focus();\n        modal.dataset.action = action;\n    }\n\n    async confirmName() {\n        const userName = document.getElementById('userNameInput').value.trim();\n        if (!userName) {\n            alert('請輸入您的姓名');\n            return;\n        }\n        \n        if (userName.length > 20) {\n            alert('姓名不能超過 20 個字符');\n            return;\n        }\n\n        this.currentUser = {\n            id: this.generateUserId(),\n            name: userName,\n            isHost: this.isHost\n        };\n\n        try {\n            // Join room via API\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/join`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    user: this.currentUser\n                })\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                alert(error.error || '加入房間失敗');\n                return;\n            }\n\n            const data = await response.json();\n            \n            // Update isHost status based on server response\n            if (data.room.participants && data.room.participants[this.currentUser.id]) {\n                this.isHost = data.room.participants[this.currentUser.id].isHost;\n                this.currentUser.isHost = this.isHost;\n            }\n            \n            this.updateRoomFromServer(data.room);\n\n            // Hide modal\n            document.getElementById('nameModal').style.display = 'none';\n            \n            // Show game screen\n            this.showGameScreen();\n        } catch (error) {\n            console.error('Error joining room:', error);\n            alert('網路錯誤，請稍後再試');\n        }\n    }\n\n    updateRoomFromServer(roomData) {\n        // Update participants\n        this.participants.clear();\n        if (roomData.participants) {\n            Object.entries(roomData.participants).forEach(([id, participant]) => {\n                this.participants.set(id, participant);\n            });\n        }\n        \n        // Update votes\n        this.votes.clear();\n        if (roomData.votes) {\n            Object.entries(roomData.votes).forEach(([id, vote]) => {\n                this.votes.set(id, vote);\n            });\n        }\n        \n        // Removed: No longer show notification messages to targets\n        // The animation itself is the notification\n        \n        // Process animation events for all clients\n        if (roomData.animations && roomData.animations.length > 0) {\n            console.log(`Received ${roomData.animations.length} animation events:`, roomData.animations);\n            this.processAnimationEvents(roomData.animations);\n        }\n        \n        // Update room state\n        this.votingActive = roomData.votingActive || false;\n        this.votesRevealed = roomData.votesRevealed || false;\n        this.currentIssue = roomData.currentIssue || \"準備估算第一個故事\";\n        \n        // Update current user's host status based on server data\n        if (this.currentUser && roomData.participants[this.currentUser.id]) {\n            this.isHost = roomData.participants[this.currentUser.id].isHost;\n        }\n        \n        this.updateUI();\n    }\n\n    showGameScreen() {\n        document.getElementById('welcomeScreen').style.display = 'none';\n        document.getElementById('gameScreen').style.display = 'grid';\n        document.getElementById('currentRoomId').textContent = this.currentRoom;\n        \n        // Update URL\n        const newURL = new URL(window.location);\n        newURL.searchParams.set('room', this.currentRoom);\n        window.history.replaceState({}, '', newURL);\n        \n        this.updateUI();\n        this.startPolling();\n    }\n\n    startPolling() {\n        // Poll for updates every 2 seconds\n        this.pollInterval = setInterval(() => {\n            this.checkForUpdates();\n        }, 2000);\n    }\n\n    async checkForUpdates() {\n        try {\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}`);\n            \n            if (response.ok) {\n                const roomData = await response.json();\n                this.updateRoomFromServer(roomData);\n            } else if (response.status === 404) {\n                // Room no longer exists, return to welcome screen\n                this.handleRoomClosed();\n            }\n        } catch (error) {\n            console.error('Error checking for updates:', error);\n        }\n    }\n\n    handleRoomClosed() {\n        // Stop polling\n        if (this.pollInterval) {\n            clearInterval(this.pollInterval);\n            this.pollInterval = null;\n        }\n        \n        // Reset application state\n        this.currentRoom = null;\n        this.currentUser = null;\n        this.participants.clear();\n        this.votes.clear();\n        this.isHost = false;\n        this.votingActive = false;\n        this.votesRevealed = false;\n        this.currentIssue = \"準備估算第一個故事\";\n        this.playedAnimations.clear();\n        \n        // Show welcome screen\n        document.getElementById('gameScreen').style.display = 'none';\n        document.getElementById('welcomeScreen').style.display = 'flex';\n        \n        // Clear URL parameters\n        const newURL = new URL(window.location);\n        newURL.searchParams.delete('room');\n        window.history.replaceState({}, '', newURL);\n        \n        // Show notification\n        this.showToast('房間已關閉，已返回主畫面');\n    }\n\n    updateUI() {\n        // Generate current state hash for comparison\n        const currentState = this.generateUIStateHash();\n        \n        // Only update components that have actually changed\n        if (currentState.participantsHash !== this.lastUIState.participantsHash) {\n            this.updateParticipantsList();\n            this.updateParticipantsCount();\n        }\n        \n        // Current issue display removed\n        \n        if (currentState.votingActive !== this.lastUIState.votingActive || \n            currentState.votesRevealed !== this.lastUIState.votesRevealed ||\n            currentState.participantsHash !== this.lastUIState.participantsHash) {\n            this.updateVotingStatus();\n            this.updateCards();\n        }\n        \n        if (currentState.votesRevealed !== this.lastUIState.votesRevealed) {\n            this.updateResults();\n        }\n        \n        // Update all host-related buttons whenever host status might have changed\n        this.updateAllHostButtons();\n        \n        // Update last state\n        this.lastUIState = currentState;\n    }\n\n    generateUIStateHash() {\n        // Create a hash representing the current UI state\n        const participantsData = Array.from(this.participants.entries()).map(([id, participant]) => ({\n            id,\n            name: participant.name,\n            hasVoted: participant.hasVoted,\n            isHost: participant.isHost\n        }));\n        \n        const participantsHash = JSON.stringify(participantsData) + '|' + JSON.stringify(Object.fromEntries(this.votes));\n        \n        return {\n            participantsHash,\n            votingActive: this.votingActive,\n            votesRevealed: this.votesRevealed,\n            currentIssue: this.currentIssue,\n            participantsCount: this.participants.size\n        };\n    }\n\n    updateParticipantsList() {\n        const container = document.getElementById('participantsList');\n        container.innerHTML = '';\n        \n        // Sort participants: hosts first, then others\n        const sortedParticipants = Array.from(this.participants.values()).sort((a, b) => {\n            if (a.isHost && !b.isHost) return -1;\n            if (!a.isHost && b.isHost) return 1;\n            return 0; // Keep original order for participants with same host status\n        });\n        \n        sortedParticipants.forEach(participant => {\n            const item = document.createElement('div');\n            item.className = 'participant-item';\n            \n            if (participant.hasVoted) {\n                item.classList.add('voted');\n            }\n            \n            if (participant.isHost) {\n                item.classList.add('host');\n            }\n            \n            // Highlight current user's own participant item\n            if (this.currentUser && participant.id === this.currentUser.id) {\n                item.classList.add('self');\n            }\n            \n            // Check if boomerang can be thrown\n            // Anyone can throw to non-voters, hosts can throw to anyone (except themselves)\n            // When all voted but not revealed, anyone can throw to host\n            const allVotedButNotRevealed = this.allParticipantsVoted() && !this.votesRevealed;\n            const canThrowBoomerang = !this.votesRevealed && participant.id !== this.currentUser.id && \n                                    (!participant.hasVoted || this.isHost || (allVotedButNotRevealed && participant.isHost));\n            \n            // Make the entire item clickable if boomerang can be thrown\n            if (canThrowBoomerang) {\n                item.classList.add('throwable-item');\n                item.setAttribute('onclick', `window.planningPoker.throwBoomerang('${participant.id}', '${this.escapeHtml(participant.name)}', event)`);\n                item.style.cursor = 'pointer';\n            }\n            \n            item.innerHTML = `\n                <span class=\"participant-name ${canThrowBoomerang ? 'throwable' : ''}\">${this.escapeHtml(participant.name)}</span>\n                <span class=\"participant-vote-status\">${participant.hasVoted ? '✅' : ''}</span>\n            `;\n            \n            container.appendChild(item);\n        });\n    }\n\n    updateParticipantsCount() {\n        const count = this.participants.size;\n        const participantsCountElement = document.getElementById('participantsCount');\n        \n        // Hide participants count when not in a room\n        if (!this.currentRoom || !this.currentUser) {\n            participantsCountElement.style.display = 'none';\n        } else {\n            participantsCountElement.style.display = 'block';\n            participantsCountElement.textContent = `${count} participants`;\n        }\n    }\n\n    updateAllHostButtons() {\n        // Update claim host button\n        const claimHostBtn = document.getElementById('claimHostBtn');\n        const revealBtn = document.getElementById('revealBtn');\n        const revoteBtn = document.getElementById('revoteBtn');\n        const nextIssueBtn = document.getElementById('nextIssueBtn');\n        \n        // Show claim host button only if user is in a room and is not the host\n        if (this.currentRoom && this.currentUser && !this.isHost) {\n            claimHostBtn.style.display = 'inline-block';\n        } else {\n            claimHostBtn.style.display = 'none';\n        }\n        \n        // Update voting control buttons based on current state\n        if (this.isHost) {\n            // Handle reveal button based on voting state\n            if (this.votesRevealed) {\n                revealBtn.style.display = 'none';\n                revoteBtn.style.display = 'inline-block';\n                nextIssueBtn.style.display = 'inline-block';\n            } else if (this.allParticipantsVoted()) {\n                revealBtn.style.display = 'inline-block';\n                revealBtn.textContent = '揭示結果';\n                revoteBtn.style.display = 'none';\n                nextIssueBtn.style.display = 'none';\n            } else {\n                const votedCount = Array.from(this.participants.values()).filter(p => p.hasVoted).length;\n                if (votedCount > 0) {\n                    revealBtn.style.display = 'inline-block';\n                    revealBtn.textContent = '強制開票';\n                } else {\n                    revealBtn.style.display = 'none';\n                }\n                revoteBtn.style.display = 'none';\n                nextIssueBtn.style.display = 'none';\n            }\n        } else {\n            // Non-host users should not see any host controls\n            revealBtn.style.display = 'none';\n            revoteBtn.style.display = 'none';\n            nextIssueBtn.style.display = 'none';\n        }\n    }\n\n    // updateCurrentIssue() method removed - no longer displaying current issue\n\n    updateVotingStatus() {\n        const progressElement = document.getElementById('votingProgress');\n        const resultsSection = document.getElementById('resultsSection');\n        \n        if (this.votesRevealed) {\n            progressElement.textContent = '';\n            resultsSection.style.display = 'block';\n        } else if (this.allParticipantsVoted()) {\n            progressElement.textContent = '所有人已投票，可以揭示結果';\n            resultsSection.style.display = 'none';\n        } else {\n            const votedCount = Array.from(this.participants.values()).filter(p => p.hasVoted).length;\n            const totalCount = this.participants.size;\n            \n            if (votedCount > 0) {\n                progressElement.textContent = `投票中... (${votedCount}/${totalCount}) - 主持人可強制開票`;\n            } else {\n                progressElement.textContent = `等待投票中... (${votedCount}/${totalCount})`;\n            }\n            resultsSection.style.display = 'none';\n        }\n    }\n\n    updateCards() {\n        const cards = document.querySelectorAll('.card');\n        const currentUserVote = this.votes.get(this.currentUser.id);\n        \n        cards.forEach(card => {\n            card.classList.remove('selected', 'disabled');\n            \n            if (this.votesRevealed) {\n                card.classList.add('disabled');\n            } else if (currentUserVote && card.dataset.value === currentUserVote) {\n                card.classList.add('selected');\n            }\n        });\n    }\n\n    updateResults() {\n        if (!this.votesRevealed) return;\n        \n        const container = document.getElementById('resultsContainer');\n        container.innerHTML = '';\n        \n        const voteValues = Array.from(this.votes.values()).filter(v => v !== '?');\n        const numericVotes = voteValues.filter(v => !isNaN(v)).map(Number);\n        \n        let highestVote = null;\n        let lowestVote = null;\n        \n        if (numericVotes.length > 0) {\n            highestVote = Math.max(...numericVotes).toString();\n            lowestVote = Math.min(...numericVotes).toString();\n        }\n        \n        // Show all participants, including those who didn't vote\n        this.participants.forEach(participant => {\n            const item = document.createElement('div');\n            item.className = 'result-item';\n            \n            let displayValue;\n            let hasVote = false;\n            \n            if (this.votes.has(participant.id)) {\n                displayValue = this.votes.get(participant.id);\n                hasVote = true;\n                \n                // Apply highest/lowest styling only to numeric votes\n                if (displayValue === highestVote && numericVotes.length > 1) {\n                    item.classList.add('highest');\n                } else if (displayValue === lowestVote && numericVotes.length > 1) {\n                    item.classList.add('lowest');\n                }\n            } else {\n                displayValue = '未投票';\n                item.classList.add('no-vote');\n            }\n            \n            item.innerHTML = `\n                <div class=\"result-participant\">${this.escapeHtml(participant.name)}</div>\n                <div class=\"result-value ${hasVote ? '' : 'no-vote-text'}\">${displayValue}</div>\n            `;\n            \n            container.appendChild(item);\n        });\n        \n        // Button visibility is now handled by updateAllHostButtons()\n    }\n\n    async selectCard(value) {\n        if (this.votesRevealed) return;\n        \n        // Check if clicking the same card to deselect\n        const currentVote = this.votes.get(this.currentUser.id);\n        let voteValue = value;\n        \n        if (currentVote === value) {\n            // Deselect by sending null vote\n            voteValue = null;\n        }\n        \n        try {\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/vote`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: this.currentUser.id,\n                    vote: voteValue\n                })\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                this.updateRoomFromServer(data.room);\n            }\n        } catch (error) {\n            console.error('Error submitting vote:', error);\n        }\n    }\n\n    allParticipantsVoted() {\n        return Array.from(this.participants.values()).every(p => p.hasVoted);\n    }\n\n    async revealVotes() {\n        if (!this.isHost) return;\n        \n        // Check if at least one person has voted (for force reveal)\n        const votedCount = Array.from(this.participants.values()).filter(p => p.hasVoted).length;\n        if (votedCount === 0) return;\n        \n        try {\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/reveal`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: this.currentUser.id\n                })\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                this.updateRoomFromServer(data.room);\n            }\n        } catch (error) {\n            console.error('Error revealing votes:', error);\n        }\n    }\n\n    async startNewVoting() {\n        if (!this.isHost) return;\n        \n        try {\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/new-vote`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: this.currentUser.id\n                })\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                this.updateRoomFromServer(data.room);\n            }\n        } catch (error) {\n            console.error('Error starting new vote:', error);\n        }\n    }\n\n    async nextIssue() {\n        if (!this.isHost) return;\n        \n        // For demo purposes, just increment issue number\n        let newIssue = this.currentIssue;\n        const issueMatch = this.currentIssue.match(/\\d+/);\n        if (issueMatch) {\n            const num = parseInt(issueMatch[0]) + 1;\n            newIssue = this.currentIssue.replace(/\\d+/, num);\n        } else {\n            newIssue = \"準備估算下一個故事\";\n        }\n        \n        try {\n            // Update issue first\n            const issueResponse = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/issue`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: this.currentUser.id,\n                    issue: newIssue\n                })\n            });\n\n            if (issueResponse.ok) {\n                // Then start new voting\n                const voteResponse = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/new-vote`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        userId: this.currentUser.id\n                    })\n                });\n\n                if (voteResponse.ok) {\n                    const data = await voteResponse.json();\n                    this.updateRoomFromServer(data.room);\n                }\n            }\n        } catch (error) {\n            console.error('Error moving to next issue:', error);\n        }\n    }\n\n    copyRoomLink() {\n        const url = new URL(window.location);\n        url.searchParams.set('room', this.currentRoom);\n        \n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(url.toString()).then(() => {\n                this.showToast('房間連結已複製到剪貼板');\n            }).catch(() => {\n                this.fallbackCopyTextToClipboard(url.toString());\n            });\n        } else {\n            this.fallbackCopyTextToClipboard(url.toString());\n        }\n    }\n\n    fallbackCopyTextToClipboard(text) {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n        textArea.style.top = \"0\";\n        textArea.style.left = \"0\";\n        textArea.style.position = \"fixed\";\n        \n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        try {\n            const successful = document.execCommand('copy');\n            if (successful) {\n                this.showToast('房間連結已複製到剪貼板');\n            } else {\n                this.showToast('複製失敗，請手動複製連結');\n            }\n        } catch (err) {\n            this.showToast('複製失敗，請手動複製連結');\n        }\n        \n        document.body.removeChild(textArea);\n    }\n\n    async claimHost() {\n        if (!this.currentRoom || !this.currentUser) {\n            this.showToast('無法奪取主持人：未加入房間');\n            return;\n        }\n\n        if (this.isHost) {\n            this.showToast('您已經是主持人了');\n            return;\n        }\n\n        try {\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/claim-host`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: this.currentUser.id,\n                    userName: this.currentUser.name\n                })\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                if (result.success) {\n                    this.isHost = true;\n                    this.showToast('成功奪取主持人權限！');\n                    // Trigger UI update\n                    this.checkForUpdates();\n                } else {\n                    this.showToast(result.message || '奪取主持人失敗');\n                }\n            } else {\n                this.showToast('奪取主持人失敗：伺服器錯誤');\n            }\n        } catch (error) {\n            console.error('Error claiming host:', error);\n            this.showToast('奪取主持人失敗：網路錯誤');\n        }\n    }\n\n    showToast(message) {\n        // Create a simple toast notification\n        const toast = document.createElement('div');\n        toast.textContent = message;\n        toast.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #48bb78;\n            color: white;\n            padding: 12px 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n            z-index: 1001;\n            animation: slideIn 0.3s ease-out;\n        `;\n        \n        document.body.appendChild(toast);\n        \n        setTimeout(() => {\n            toast.style.animation = 'fadeOut 0.3s ease-out';\n            setTimeout(() => {\n                if (document.body.contains(toast)) {\n                    document.body.removeChild(toast);\n                }\n            }, 300);\n        }, 3000);\n    }\n\n    escapeHtml(text) {\n        const map = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#039;'\n        };\n        return text.replace(/[&<>\"']/g, m => map[m]);\n    }\n\n    selectProjectile(type) {\n        this.currentProjectile = type;\n        \n        // Update UI\n        document.querySelectorAll('.projectile-option').forEach(option => {\n            option.classList.remove('active');\n        });\n        document.querySelector(`[data-type=\"${type}\"]`).classList.add('active');\n        \n        // Update current selection display\n        const projectileData = {\n            boomerang: '🪃 迴力鏢',\n            rocket: '🚀 火箭',\n            stone: '🪨 石頭'\n        };\n        document.getElementById('currentProjectile').textContent = projectileData[type];\n    }\n\n    async throwBoomerang(targetUserId, targetUserName, event) {\n        try {\n            const response = await fetch(`${this.apiBase}/rooms/${this.currentRoom}/paper-ball`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    fromUserId: this.currentUser.id,\n                    fromUserName: this.currentUser.name,\n                    targetUserId: targetUserId,\n                    targetUserName: targetUserName,\n                    projectileType: this.currentProjectile\n                })\n            });\n\n            if (response.ok) {\n                // No feedback to thrower to avoid distraction\n                console.log(`Projectile thrown to ${targetUserName}`);\n            }\n        } catch (error) {\n            console.error('Error throwing boomerang:', error);\n        }\n    }\n\n    findParticipantElement(targetName) {\n        // Find the target participant element in the DOM\n        const participantItems = document.querySelectorAll('.participant-item');\n        for (const item of participantItems) {\n            const nameElement = item.querySelector('.participant-name');\n            if (nameElement && nameElement.textContent === targetName) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    showProjectileAnimation(event, targetElement, projectileType = 'boomerang', throwerElement = null) {\n        // Use provided thrower element or find the current user's element\n        if (!throwerElement) {\n            throwerElement = this.findParticipantElement(this.currentUser.name);\n        }\n        \n        // Get starting position from thrower's div center\n        let startX, startY;\n        if (throwerElement) {\n            const throwerRect = throwerElement.getBoundingClientRect();\n            startX = throwerRect.left + throwerRect.width / 2;\n            startY = throwerRect.top + throwerRect.height / 2;\n        } else {\n            // Fallback: find current user in participants list\n            const participantItems = document.querySelectorAll('.participant-item');\n            let foundThrower = false;\n            for (const item of participantItems) {\n                const nameElement = item.querySelector('.participant-name');\n                if (nameElement && nameElement.textContent.trim() === this.currentUser.name.trim()) {\n                    const rect = item.getBoundingClientRect();\n                    startX = rect.left + rect.width / 2;\n                    startY = rect.top + rect.height / 2;\n                    foundThrower = true;\n                    break;\n                }\n            }\n            \n            if (!foundThrower) {\n                // Final fallback to click position\n                startX = event.clientX;\n                startY = event.clientY;\n            }\n        }\n        \n        // Get target position (center of target's div)\n        let targetX, targetY;\n        if (targetElement) {\n            const targetRect = targetElement.getBoundingClientRect();\n            targetX = targetRect.left + targetRect.width / 2;\n            targetY = targetRect.top + targetRect.height / 2;\n        } else {\n            // Fallback if target not found - use a position relative to thrower\n            const isMobile = window.innerWidth <= 768;\n            targetX = startX + (isMobile ? 180 : 250);\n            targetY = startY + (isMobile ? -80 : -120);\n        }\n        \n        // Create projectile element\n        const projectile = document.createElement('div');\n        const projectileData = {\n            boomerang: { icon: '🪃', class: 'flying-boomerang' },\n            rocket: { icon: '🚀', class: 'flying-rocket' },\n            stone: { icon: '🪨', class: 'flying-stone' }\n        };\n        \n        projectile.className = projectileData[projectileType].class;\n        projectile.innerHTML = projectileData[projectileType].icon;\n        projectile.style.left = startX + 'px';\n        projectile.style.top = startY + 'px';\n        \n        document.body.appendChild(projectile);\n        \n        // Generate animation based on projectile type\n        const screenWidth = window.innerWidth;\n        let keyframes, animationName, duration;\n\n        if (projectileType === 'boomerang') {\n            // Spiral boomerang path from thrower to target\n            const deltaX = targetX - startX;\n            const deltaY = targetY - startY;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n            \n            const generateSpiralPath = () => {\n                const points = [];\n                const steps = 30;\n                const screenWidth = window.innerWidth;\n                \n                // Calculate maximum spiral extension (1/2 to 2/3 of screen width from left)\n                const maxSpiralX = screenWidth * (Math.random() * 0.17 + 0.5); // Random between 0.5 and 0.67\n                const spiralPeakProgress = 0.6; // Peak of spiral at 60% of journey\n                \n                // Spiral parameters\n                const spiralTurns = 2; // Number of spiral turns\n                const maxSpiralRadius = Math.min(distance * 0.4, 120); // Maximum spiral radius\n                \n                for (let i = 0; i <= steps; i++) {\n                    const progress = i / steps;\n                    \n                    // Create a trajectory that goes out to the spiral peak, then comes back to target\n                    let trajectoryX, trajectoryY;\n                    \n                    if (progress <= spiralPeakProgress) {\n                        // First phase: spiral outward toward peak\n                        const phaseProgress = progress / spiralPeakProgress;\n                        const peakX = maxSpiralX - startX; // Relative to start position\n                        const peakY = deltaY * spiralPeakProgress; // Y progression toward target\n                        \n                        trajectoryX = deltaX * phaseProgress * 0.3 + peakX * phaseProgress;\n                        trajectoryY = peakY * phaseProgress;\n                    } else {\n                        // Second phase: spiral inward toward target\n                        const phaseProgress = (progress - spiralPeakProgress) / (1 - spiralPeakProgress);\n                        const peakX = maxSpiralX - startX;\n                        const peakY = deltaY * spiralPeakProgress;\n                        \n                        trajectoryX = peakX + (deltaX - peakX) * phaseProgress;\n                        trajectoryY = peakY + (deltaY - peakY) * phaseProgress;\n                    }\n                    \n                    // Add spiral motion\n                    const spiralProgress = progress * spiralTurns * 2 * Math.PI;\n                    let spiralIntensity;\n                    \n                    if (progress <= spiralPeakProgress) {\n                        spiralIntensity = (progress / spiralPeakProgress) * maxSpiralRadius;\n                    } else {\n                        spiralIntensity = maxSpiralRadius * (1 - (progress - spiralPeakProgress) / (1 - spiralPeakProgress));\n                    }\n                    \n                    // Calculate perpendicular direction for spiral\n                    const perpX = -deltaY / distance;\n                    const perpY = deltaX / distance;\n                    \n                    const spiralOffsetX = Math.cos(spiralProgress) * spiralIntensity * perpX;\n                    const spiralOffsetY = Math.cos(spiralProgress) * spiralIntensity * perpY;\n                    \n                    const finalX = trajectoryX + spiralOffsetX;\n                    const finalY = trajectoryY + spiralOffsetY;\n                    \n                    const rotation = progress * 2880; // 8 full rotations\n                    const scale = 1 + Math.sin(progress * Math.PI * 3) * 0.25; // Pulsing effect\n                    \n                    points.push({\n                        x: finalX, y: finalY, rotation: rotation, scale: scale,\n                        percent: Math.round(progress * 100)\n                    });\n                }\n                return points;\n            };\n\n            const pathPoints = generateSpiralPath();\n            let keyframesContent = '';\n            pathPoints.forEach(point => {\n                keyframesContent += `${point.percent}% {\n                    transform: translate(${point.x}px, ${point.y}px) rotate(${point.rotation}deg) scale(${point.scale});\n                }`;\n            });\n\n            keyframes = `@keyframes boomerangSpiral { ${keyframesContent} }`;\n            animationName = 'boomerangSpiral';\n            duration = '1.4s';\n            \n        } else if (projectileType === 'rocket') {\n            // Rocket path: thrower center → 3/4 screen width → target center\n            const midPointX = screenWidth * 0.75; // 3/4 screen width (absolute position)\n            const midPointY = startY - 80; // Slightly higher than start\n            \n            // Calculate angle to target for final direction\n            const deltaX = targetX - midPointX;\n            const deltaY = targetY - midPointY;\n            const angleToTarget = Math.atan2(deltaY, deltaX) * (180 / Math.PI);\n            \n            keyframes = `\n                @keyframes rocketFlight {\n                    0% { \n                        transform: translate(0px, 0px) rotate(45deg) scale(1);\n                        opacity: 0.8;\n                    }\n                    50% { \n                        transform: translate(${midPointX - startX}px, ${midPointY - startY}px) rotate(0deg) scale(1.2);\n                        opacity: 1;\n                    }\n                    100% { \n                        transform: translate(${targetX - startX}px, ${targetY - startY}px) rotate(${angleToTarget}deg) scale(1.5);\n                        opacity: 1;\n                    }\n                }`;\n            animationName = 'rocketFlight';\n            duration = '1.4s';\n            \n        } else if (projectileType === 'stone') {\n            // Meteor from top-right corner of screen to target center\n            const meteorStartX = screenWidth - 50; // Top-right corner (absolute position)\n            const meteorStartY = 50; // Top edge\n            \n            keyframes = `\n                @keyframes stoneFlight {\n                    0% { \n                        transform: translate(${meteorStartX - startX}px, ${meteorStartY - startY}px) rotate(225deg) scale(0.6);\n                        opacity: 0.5;\n                        filter: drop-shadow(2px 2px 8px rgba(255, 100, 0, 0.8));\n                    }\n                    30% { \n                        opacity: 1;\n                        filter: drop-shadow(3px 3px 12px rgba(255, 150, 0, 1));\n                    }\n                    100% { \n                        transform: translate(${targetX - startX}px, ${targetY - startY}px) rotate(225deg) scale(1.3);\n                        opacity: 1;\n                        filter: drop-shadow(4px 4px 16px rgba(255, 0, 0, 0.8));\n                    }\n                }`;\n            animationName = 'stoneFlight';\n            duration = '1.1s';\n        }\n        \n        // Add keyframes to document\n        const styleSheet = document.createElement('style');\n        styleSheet.textContent = keyframes;\n        document.head.appendChild(styleSheet);\n        \n        // Apply animation based on projectile type\n        projectile.style.animation = `${animationName} ${duration} cubic-bezier(0.25, 0.1, 0.25, 1) forwards`;\n        \n        // Calculate timing based on duration\n        const durationMs = parseFloat(duration) * 1000;\n        \n        // Add impact effect\n        setTimeout(() => {\n            projectile.style.animation = 'none';\n            this.createImpactEffect(targetX, targetY);\n            projectile.style.transform = `translate(${targetX - startX}px, ${targetY - startY}px) scale(0.5)`;\n            projectile.style.opacity = '0.3';\n            \n            // Add hit effect to target element\n            if (targetElement) {\n                this.addHitEffect(targetElement);\n            }\n        }, durationMs);\n        \n        // Final fade out\n        setTimeout(() => {\n            projectile.style.transition = 'opacity 0.5s ease-out';\n            projectile.style.opacity = '0';\n        }, durationMs + 400);\n        \n        // Clean up\n        setTimeout(() => {\n            if (document.head.contains(styleSheet)) {\n                document.head.removeChild(styleSheet);\n            }\n        }, durationMs + 700);\n        \n        // Clean up projectile element\n        setTimeout(() => {\n            if (document.body.contains(projectile)) {\n                document.body.removeChild(projectile);\n            }\n        }, durationMs + 1000);\n    }\n\n    createImpactEffect(x, y) {\n        // Create multiple impact effects for more dramatic effect\n        const effects = ['💥', '⭐', '💫', '✨'];\n        \n        effects.forEach((emoji, index) => {\n            const impact = document.createElement('div');\n            impact.className = 'boomerang-impact';\n            impact.innerHTML = emoji;\n            impact.style.left = (x + (Math.random() - 0.5) * 40) + 'px';\n            impact.style.top = (y + (Math.random() - 0.5) * 40) + 'px';\n            impact.style.animationDelay = (index * 0.1) + 's';\n            \n            document.body.appendChild(impact);\n            \n            // Remove impact effect after animation\n            setTimeout(() => {\n                if (document.body.contains(impact)) {\n                    document.body.removeChild(impact);\n                }\n            }, 1200 + (index * 100));\n        });\n        \n        // Add screen shake effect\n        document.body.style.animation = 'screenShake 0.5s ease-in-out';\n        setTimeout(() => {\n            document.body.style.animation = '';\n        }, 500);\n    }\n\n    addHitEffect(targetElement) {\n        // Add hit effect class to target element\n        targetElement.classList.add('participant-hit');\n        \n        // Remove the hit effect after 2 seconds\n        setTimeout(() => {\n            targetElement.classList.remove('participant-hit');\n        }, 2000);\n    }\n\n    showPaperBallNotification(fromUserName) {\n        const notification = document.getElementById('paperBallNotification');\n        const message = document.querySelector('.paper-ball-message');\n        \n        const messages = [\n            `${fromUserName} 向你丟了回力鏢！快點選卡片吧！ 🎯`,\n            `${fromUserName} 提醒你該投票囉！別讓大家等太久～ 🪃💥`,\n            `來自 ${fromUserName} 的愛心回力鏢：該選卡片了！ 💝`,\n            `${fromUserName} 說：「快選卡片，不要發呆！」 ⚡`,\n            `${fromUserName} 用回力鏢催促你投票中... 🪃⚡`\n        ];\n        \n        const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n        message.textContent = randomMessage;\n        \n        notification.style.display = 'flex';\n        \n        // Auto hide after 4 seconds\n        setTimeout(() => {\n            this.hidePaperBallNotification();\n        }, 4000);\n    }\n\n    hidePaperBallNotification() {\n        const notification = document.getElementById('paperBallNotification');\n        notification.style.display = 'none';\n    }\n\n    processAnimationEvents(animations) {\n        if (!animations || animations.length === 0) return;\n        \n        // Process new animations that haven't been played yet\n        animations.forEach(animation => {\n            // Only play animations that are recent (within 8 seconds) and not already played\n            const isRecent = Date.now() - animation.timestamp < 8000;\n            const notPlayed = !this.playedAnimations.has(animation.id);\n            \n            if (isRecent && notPlayed) {\n                this.playedAnimations.add(animation.id);\n                \n                console.log(`Playing animation: ${animation.fromUserName} -> ${animation.targetUserName} (${animation.projectileType})`);\n                \n                // Find elements for the animation\n                const throwerElement = this.findParticipantElement(animation.fromUserName);\n                const targetElement = this.findParticipantElement(animation.targetUserName);\n                \n                console.log(`Elements found: thrower=${!!throwerElement}, target=${!!targetElement}`);\n                \n                if (throwerElement && targetElement) {\n                    // Create a synthetic event for the animation\n                    const syntheticEvent = {\n                        clientX: throwerElement.getBoundingClientRect().left + throwerElement.getBoundingClientRect().width / 2,\n                        clientY: throwerElement.getBoundingClientRect().top + throwerElement.getBoundingClientRect().height / 2\n                    };\n                    \n                    // Play the animation for all clients with correct thrower element\n                    this.showProjectileAnimation(syntheticEvent, targetElement, animation.projectileType, throwerElement);\n                } else {\n                    console.warn(`Could not find elements for animation: thrower=${!!throwerElement}, target=${!!targetElement}`);\n                    console.warn(`Thrower name: \"${animation.fromUserName}\", Target name: \"${animation.targetUserName}\"`);\n                    console.warn('Available participants:', Array.from(this.participants.values()).map(p => p.name));\n                }\n            }\n        });\n        \n        // Clean up old animation IDs to prevent memory leak\n        if (this.playedAnimations.size > 100) {\n            const animationIds = new Set(animations.map(a => a.id));\n            this.playedAnimations = new Set([...this.playedAnimations].filter(id => animationIds.has(id)));\n        }\n    }\n\n    async leaveRoom() {\n        if (!this.currentRoom || !this.currentUser) return;\n        \n        try {\n            // Use sendBeacon with URL parameters (more reliable for beforeunload)\n            const url = `${this.apiBase}/rooms/${this.currentRoom}/leave?userId=${encodeURIComponent(this.currentUser.id)}`;\n            navigator.sendBeacon(url);\n        } catch (error) {\n            console.error('Error leaving room:', error);\n        }\n    }\n\n    destroy() {\n        if (this.pollInterval) {\n            clearInterval(this.pollInterval);\n        }\n        \n        // Leave room when destroying\n        this.leaveRoom();\n    }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.planningPoker = new PlanningPoker();\n});\n\n// Clean up when page is unloaded\nwindow.addEventListener('beforeunload', () => {\n    if (window.planningPoker) {\n        window.planningPoker.destroy();\n    }\n});\n\n// Add some additional CSS for toast animations\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes slideIn {\n        from {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes fadeOut {\n        from {\n            opacity: 1;\n        }\n        to {\n            opacity: 0;\n        }\n    }\n`;\ndocument.head.appendChild(style);";
